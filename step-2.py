"""
Задание:
В данном шаге реализации необходимо добавить функциональность сравнения
объектов класса, исходя из комментария к функции сортировки. Так же
необходимо реализовать оптимальный алгоритм сортировки получаемых
элементов. В сдаче решения необходимо защитить алгоритм сортировки,
чтобы он был оптимальным.
"""


class Liquid:
    id: int  # номер жижи, реализовать автоинкремент
    title: str  # название
    density: float  # плотность

    def __init__(self, title, density):
        """ Должно быть реализовано на прошлом шаге """
        pass

    def __str__(self):
        """ Должно быть реализовано на прошлом шаге """
        pass


def sorting(sorting_list):
    """
    Функция сортировки по плотности жидкости, важно
    тут сравнивать именно объекты, а не их свойства, также
    добавить группировку по типу жидкости: питьевая или техническая
    """
    pass


if __name__ == '__main__':
    liquid_list = list()
    while True:
        print('Предлагаю вам ввести параметры жидкости')
        title = input('Введите название: ')
        density = input('Введите плотность: ')
        type_of_liquid = input('Это можно пить? [Y/n]: ')
        new_item = Liquid(title, density)
        liquid_list.append(new_item)

        sorting(liquid_list)

        for i in liquid_list:
            print(i)
